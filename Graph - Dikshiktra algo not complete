
#include <iostream>
#include <map>
#include <queue>
#include <list>
#include <vector>
#include <algorithm>



using namespace std;


// this is for GENERIC CODE matalab apan
//koi bhi typ ka data use kr skte hai
//initialize krne ki jarurat nahi hai bas int ki jgh typename DAAL DENA 'T'
template <typename T> 


class Graph{
    public:
    
        map<T,list<T>>adjList;

    
    
        void addEdge(T u, T v, bool direction){
  
        //direction = 0 -> indirected Graph
        //direction = 1 -> directed Graph
        
        
        //for u->v
        adjList[u].push_back(v);
        
        
        //check v->u
        if(direction == 0){
           adjList[v].push_back(u);
           
        }
        
    }
    
    
    void printAdj(){
        for(auto i: adjList){
            cout<<i.first<<" -> ";
            
            for(auto j: i.second){
                cout<<j<<", ";
               
                
            } 
            
            cout<<endl;
        }
    }
    
    
    
    vector<int> isCyclicBfs(int src , int dest){
       
    map<int , bool > visited;
    map<int, int > parent;
    queue<int>q;
    
    q.push(src);
    visited[src] =true;
    parent[src] = -1 ;
    
    while(!q.empty()){
        int front = q.front();
        q.pop();
        
        for(auto neighbour : adjList[front]){
            // if(visited[neighbour]== true && neighbour != parent[front]){
            //     return true ;
            // }
             if(!visited[neighbour]) {
                q.push(neighbour);
                visited[neighbour] = true ;
                parent[neighbour] = front ;
                
            }
           }
        }
        
        
     vector<int>ans;
    
    ans.push_back(dest);
    cout<<"cut kr saale"<<parent<<endl;
    while(parent[dest]!= src){
        
        ans.push_back(parent[dest]);
        dest = parent[dest];
    }
    
        ans.push_back(src);
        reverse(ans.begin(), ans.end());
        return ans;
    
    }
    
};


int main()
{
  Graph<int>g;
  
  
  g.addEdge(1,2,0);
  g.addEdge(1,3,0);
  g.addEdge(1,4,0);
  g.addEdge(2,5,0);
  g.addEdge(3,8,0);
  g.addEdge(4,6,0);
  g.addEdge(5,8,0);
  g.addEdge(6,7,0);
  g.addEdge(7,8,0);
  
  

   
  
  

  cout<< "Printing the Adjacency List 1 :"<<endl;
  g.printAdj();
  
  cout<<"Enter destination  : ";
  int dest;
  cin>>dest;
  
  vector<int>ans =
  g.isCyclicBfs(0,dest);
  
  
         for(int i = 0; i < ans.size(); i++) {
        // Printing the element at
        // index 'i' of vector
        cout << ans[i]<<" " ;
    }
    cout << endl;
  

  
    return 0;
}
