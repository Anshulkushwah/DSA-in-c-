
#include <iostream>
#include <map>
#include <queue>
#include <list>



using namespace std;


// this is for GENERIC CODE matalab apan
//koi bhi typ ka data use kr skte hai
//initialize krne ki jarurat nahi hai bas int ki jgh typename DAAL DENA 'T'
template <typename T> 


class Graph{
    public:

        map<T,list<T>>adjList;



        void addEdge(T u, T v, bool direction){

        //direction = 0 -> indirected Graph
        //direction = 1 -> directed Graph


        //for u->v
        adjList[u].push_back(v);


        //check v->u
        if(direction == 0){
           adjList[v].push_back(u);

        }

    }


    void printAdj(){
        for(auto i: adjList){
            cout<<i.first<<" -> ";

            for(auto j: i.second){
                cout<<j<<", ";


            } 

            cout<<endl;
        }
    }

bool isCyclicDfsDirected(int src, map<int,bool>& visited, map<int,bool>& dfsVisited){
    visited[src] = true;
    dfsVisited[src] = true;
    
    for (auto neighbour : adjList[src]){
        if(!visited[neighbour]){
            bool isCycleDetected = isCyclicDfsDirected(neighbour, visited,dfsVisited);
            if(isCycleDetected == true)
            return true ;
        }
        else if (visited[neighbour] == true && dfsVisited[neighbour] == true){
            //cycle present 
            return true;
        }
    }
    
    dfsVisited[src] = false ;
    return false ;
}

};


int main()
{
  Graph<int>g;

  g.addEdge(1,2,1);
  g.addEdge(2,3,1);
  g.addEdge(2,4,1);
  g.addEdge(3,7,1);
  g.addEdge(3,8,1);
  g.addEdge(4,5,1);
  g.addEdge(5,6,1);
  g.addEdge(6,4,1);
  g.addEdge(8,7,1);
  
  cout<<"Printing the adj List "<<endl;
  
  g.printAdj();
  
  map<int, bool> visited;
  map<int,bool> dfsVis;
  cout<<"Cyclic or not "<<g.isCyclicDfsDirected(1,visited,dfsVis);
  
  




    return 0;
}
