
#include <iostream>
#include <map>
#include <queue>
#include <list>



using namespace std;


// this is for GENERIC CODE matalab apan
//koi bhi typ ka data use kr skte hai
//initialize krne ki jarurat nahi hai bas int ki jgh typename DAAL DENA 'T'
template <typename T> 


class Graph{
    public:

        map<T,list<T>>adjList;



        void addEdge(T u, T v, bool direction){

        //direction = 0 -> indirected Graph
        //direction = 1 -> directed Graph


        //for u->v
        adjList[u].push_back(v);


        //check v->u
        if(direction == 0){
           adjList[v].push_back(u);

        }

    }


    void printAdj(){
        for(auto i: adjList){
            cout<<i.first<<" -> ";

            for(auto j: i.second){
                cout<<j<<", ";


            } 

            cout<<endl;
        }
    }

void topSort(){
    //step1 : find out all indegrees
    map<int ,int > indegree;
    queue<int>q;
    
    //initialise indegree with 0
    for(auto i : adjList){
        indegree[i.first]= 0;
    }
    
    for(auto i: adjList){
        for(auto j : i.second){
            indegree[j]++;
        }
    }
    
    // step2 : push in q, indegree -> 0
    for(auto i : indegree ){
        if(i.second == 0){
            q.push(i.first);
        }
    }
    
    //step3: BFS
    while(!q.empty()){
        int front = q.front();
        cout<<front<<" ";
        q.pop();
        
        for(auto neighbour: adjList[front]){
            indegree[neighbour]--;
            if(indegree[neighbour] == 0){
                q.push(neighbour);
            }
        }
    }
    cout<<endl;
    
}

};


int main()
{
  Graph<int>g;

  g.addEdge(1,2,1);
  g.addEdge(1,3,1);
  g.addEdge(2,5,1);
  g.addEdge(3,5,1);
  g.addEdge(5,4,1);
  
  

  cout<<"Printing the adj List "<<endl;

  g.printAdj();

  cout<<endl << "Printing topSort "<<endl;
  g.topSort();




    return 0;
}
