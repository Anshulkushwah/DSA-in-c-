
#include <iostream>

using namespace std;

void
merge (int arr[], int s, int e)
{

  int mid = (s + e) / 2;

  int leftLength = mid-s+ 1;
  int rightLength = e - mid;


  //create left and right parts

  int *left = new int[leftLength];
  int *right = new int[rightLength];

  //copy into left array

  int orginalIndex = s;
  for (int i = 0; i < leftLength; i++)
    {
      left[i] = arr[orginalIndex++];
    }

  //copy into right array

  orginalIndex = mid + 1;
  for (int i = 0; i < rightLength; i++)
    {
      right[i] = arr[orginalIndex++];
    }

  //now we have two sorted arrays
  //we have to merge them 

  int leftIndex = 0;
  int rightIndex = 0;
  orginalIndex = s;

  //compare elements from left and right array and copy into orginal array
  while (leftIndex < leftLength && rightIndex < rightLength)
    {
      if (left[leftIndex] <= right[rightIndex])
	{
	  arr[orginalIndex++] = left[leftIndex++];
	}

      else
	{
	  arr[orginalIndex++] = right[rightIndex++];
	}
    }


  //check if any more element is present in left array 
  // then copy it to orginal array 

  while (leftIndex < leftLength)
    {
      arr[orginalIndex++] = left[leftIndex++];
    }

  //check if any more element is present in right array 
  // then copy it to orginal array 

  while (rightIndex < rightLength)
    {
      arr[orginalIndex++] = right[rightIndex++];
    }
}

void
mergeSort (int arr[], int s, int e)
{

  //base case 
  if (s >= e)
    {
      return;
    }

  int mid = (s + e) / 2;

  //left part
  mergeSort (arr, s, mid);

  //right part
  mergeSort (arr, mid + 1, e);

  //merge 2 sorted parts
  merge (arr, s, e);

}

int
main ()
{

  int arr[] = { 12, 11, 13, 5, 6, 7 };
  int size = 6;

  mergeSort (arr, 0, size - 1);


  for (int i = 0; i < size; i++)
    {
      cout << arr[i] << " ";

    }
  cout << endl;
  return 0;
}
