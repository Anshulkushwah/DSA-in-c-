
#include <iostream>

using namespace std;


int
partition (int arr[], int s, int e)
{

  int pivot = arr[s];

  //count smaller element
  int cnt = 0;
  for (int i = s + 1; i <= e; i++)
    {
      if (arr[i] <= pivot)

	cnt++;
    }

  //find right place for pivot
  int pivotIndex = s + cnt;


  //swap
  swap (arr[pivotIndex], arr[s]);

  //handle left and right 
  // we want all lesser element on left side 
  // and greater element on right side of pivotIndex
  int i = s, j = e;

  while (i < pivotIndex && j > pivotIndex)
    {
      //already smaller element in left side
      while (arr[i] <= pivot)
	{

	  i++;
	}

      //already greater element in right side
      while (arr[j] > pivot)
	{
	  j--;
	}

      if (i < pivotIndex && j > pivotIndex)
	{

	  swap (arr[i], arr[j]);
	  i++;
	  j--;
	}

    }

  return pivotIndex;
}

void
quickShort (int arr[], int s, int e)
{
  //base case 
  if (s >= e)
    {
      return;
    }

  int pIndex = partition (arr, s, e);

  //left
  quickShort (arr, s, pIndex - 1);

  //right
  quickShort (arr, pIndex + 1, e);

}



int
main ()
{

  int arr[] = {
    12, 11, 13, 5, 6, 7
  };
  int size = 6;

  quickShort (arr, 0, size - 1);


  for (int i = 0; i < size; i++)
    {
      cout << arr[i] << " ";

    }
  cout << endl;
  return 0;
}
