/******************************************************************************
10 5 3 -1 -1 7 6 -1 -1 -1 11 -1 -1
                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <queue>
using namespace std;

class Node
{
  public:int data;
  Node *left;
  Node *right;

    Node (int d)
  {
    data = d;
    left = NULL;
    right = NULL;
  }


};

Node *
buildTree ()
{
  cout << " ENTER THE VALUE OF DATA " << endl;
  int data;
  cin >> data;

  if (data == -1)
    return NULL;

  Node *newNode = new Node (data);

  cout << " Enter the data left child of " << data << endl;
  newNode->left = buildTree ();

  cout << " Enter the data right child of " << data << endl;
  newNode->right = buildTree ();

  return newNode;
}


void
PreOrder (Node * &root)
{				// time complexity = o(n), SPACE = O(N) [WROST CASE]
  //base case 
  if (root == NULL)
    return;

  //N
  cout << root->data << " ";

  //l
  PreOrder (root->left);
  //R
  PreOrder (root->right);
}

void
InOrder (Node * &root)
{				// time complexity = o(n), SPACE = O(N) [WROST CASE]
  //base case 
  if (root == NULL)
    return;

  //l
  InOrder (root->left);

  //N
  cout << root->data << " ";

  //R
  InOrder (root->right);
}

void
PostOrder (Node * &root)
{				// time complexity = o(n), SPACE = O(N) [WROST CASE]
  //base case 
  if (root == NULL)
    return;

  //l
  PostOrder (root->left);

  //R
  PostOrder (root->right);

  //N
  cout << root->data << " ";

}

/* void LvlOrderTraversal(Node* root){ without seprater print answer
    
    queue<Node*>q ;
    q.push(root);
    
    while(!q.empty()){
        //tu nikal
        Node * front = q.front();
        q.pop();
        
        cout<< front-> data <<" " ;
        
        //bache chor jaiyo
        if(front-> left != NULL)
        q.push(front -> left);
        if(front->right != NULL)
            q.push(front->right);
    }
} */

void
LvlOrderTraversal (Node * root)
{				// answer with seprator

  queue < Node * >q;
  q.push (root);

  q.push (NULL);		//first change 

  while (!q.empty ())
    {
      //tu nikal
      Node *front = q.front ();
      q.pop ();

      if (front == NULL)
	{			// second change 
	  cout << endl;

	  //catch here
	  if (!q.empty ())	// still elements are present 
	    q.push (NULL);
	}

      else
	{
	  cout << front->data << " ";

	  //bache chor jaiyo
	  if (front->left != NULL)
	    q.push (front->left);
	  if (front->right != NULL)
	    q.push (front->right);
	}



    }
}

int
height (Node * root) 
{
  if (root == NULL)
    return 0;
    
  if (root->left == NULL && root->right == NULL) //THIS CONDITION USE FOR GET HIGHT OF ROOT NODE
    return 0;                                    // FOR FIND NO. OF NODE present AVOID THIS CONDITION 

  int leftAns = height (root->left);
  int rightAns = height (root->right);
  int Ans = 1 + max (leftAns, rightAns);
  
  return Ans;
}

int
main ()
{
  Node *root = NULL;

  root = buildTree ();

  cout << "Printing Preorder " << endl;
  PreOrder (root);
  cout << endl;

  cout << "Printing Inorder " << endl;
  InOrder (root);
  cout << endl;

  cout << "Printing Postorder " << endl;
  PostOrder (root);
  cout << endl;

  cout << "Printing LvlOrderTraversal " << endl;
  LvlOrderTraversal (root);
  cout << endl;

  cout << " Height as tree is : " << height (root) << endl;

  return 0;
}
