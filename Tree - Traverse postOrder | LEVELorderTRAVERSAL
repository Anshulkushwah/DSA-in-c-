#include <iostream>
#include <queue>
using namespace std;

class Node {

    public:

       int data;
       Node* left;
       Node* right;

    Node (int d){
        data = d ;
        left = NULL;
        right = NULL;
    } 

};

 Node* buildTree (){
     cout<<"Enter the value of data "<< endl;
     int data;
     cin >> data ;

     if(data == -1) return NULL;

     Node* newNode = new Node(data);

     cout<<" checking left child "<< endl;
     newNode -> left = buildTree();

     cout<< " checking right child "<< endl;
     newNode -> right = buildTree();

     return newNode;
 } 

 void preOrder (Node* &root){ //NLR
     //base case
     if(root == NULL)
        return ;

    //N
    cout<< root -> data << " ";
    //L 
    preOrder(root -> left);
    //R 
    preOrder(root->right);
 }

void InOrder (Node* &root){ // LNR
     //base case
     if(root == NULL)
        return ;


    //L 
    InOrder(root -> left);
    //N
    cout<< root -> data << " ";
    //R 
    InOrder(root->right);
 }
 
void PostOrder (Node* &root){ // LRN
     //base case
     if(root == NULL)
        return ;


    //L 
    PostOrder(root -> left);
    //R 
    PostOrder(root->right);
    //N
    cout<< root -> data << " ";
 } 

void lvlOrderTraversal(Node* root){
    
    queue <Node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        //tu nikal
        
        Node* front = q.front();
        q.pop();
        
        if(front == NULL){
            
        cout<<endl;
        //catch here
        
        if(!q.empty()) //still elements are present
        q.push(NULL);
        }
        
        else{
             cout<< front->data << " ";
        
        //bache chor jaiyo
        if(front -> left != NULL)
            q.push(front->left);
            
        if(front -> right != NULL )
            q.push(front->right);
        }
    }

}

int main()
{
    Node* root = NULL;

    root = buildTree();

    cout<< " Printing preOrder " << endl;
    
    preOrder(root);
    
    cout<<endl;

    cout<< " Printing inOrder " << endl;
    
    InOrder(root);
    
    cout<<endl;

    cout<< " Printing postOrder " << endl;

    PostOrder(root);
    
    cout<<endl;

    cout<< " Printing lvlOrderTraversal " << endl;

    lvlOrderTraversal(root);
    
    cout<<endl;


    return 0;
}
