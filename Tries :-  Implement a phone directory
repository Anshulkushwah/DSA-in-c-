#include <iostream>
#include <vector>
using namespace std;

class TriNode{
    public:
        char data;
        bool isTerminal;
        TriNode* children[26];

        TriNode(char d){
            this->data = d ;
            isTerminal = false;
            for(int i = 0; i<26 ; i++){
                children[i] = NULL;
            }
            }
    };

class Trie{
    public:
        TriNode* root;
        Trie(){
            root = new TriNode('\0');
        }
        void insertHelper(TriNode* root , string word){
            //base case
            if(word.length()==0){
                root->isTerminal = true;
                return;
            }

            //current character fetch =
            char ch = word[0];
            //mapping character to an index integer
            int index = ch - 'a';

            TriNode* child;
            //2 cases exits
            //the alphabate is allready present
            //alphabate is absent

            if(root->children[index] != NULL){
                //present case-> child pr pohoch jao
                child = root->children[index];
            }

            else
            {
                //absent case-> child create and link 
                child = new TriNode(ch);
                root->children[index] = child ;
            }

            //Recursion will take care of inserttion of remaining string
            insertHelper(child,word.substr(1));
        }

        void insert(string word){
            insertHelper(root , word);
            cout<<word<<" -> Insert successful " << endl;
        }


        bool searchHelper(TriNode* root, string word){
            //base case 

            if(word.length()==0){

                return root->isTerminal;
            }

            //fetch current character 
            char ch = word[0];
                //mapping character to an index integer
                int index = ch - 'a';

                TriNode* child;

            //2 cases exits
            //the alphabate is allready present
            //alphabate is absent

            if(root->children[index] != NULL){
                //present case-> child pr pohoch jao
                child = root->children[index];
            }
            else{
                return false;
            }

            //Recursion will take care
            return searchHelper(child, word.substr(1));



        }

            bool search(string word){
                return searchHelper(root , word);
            }


            int getChildCount(TriNode* temp){
                int count = 0 ;

                for(int i =0 ; i<26 ; i++){
                    if(temp->children[i] != NULL)
                    count++;
                }
                return count;
            }

            void LongestCommonPrefix(string input, string &res){
                TriNode* temp = root;
                //traverse over input string
                for(int i = 0; i<input.length(); i++){

                    //fetch current character
                    char ch = input[i];

                    if(getChildCount(temp) == 1){
                        //include character in answer string
                        res.push_back(ch);

                        //root ko aage badhao
                        int index = ch - 'a';
                        temp = temp->children[index];
                    }

                    else{
                        break;
                    }

                    if(temp->isTerminal)
                    break;
                }

            }
            
            void getNames(TriNode* curr , string prefix , vector<string>& temp){
                //base case //jiska ek bhi child nahi hogs to apne aap return kr jaoge
                if(curr->isTerminal){
                    temp.push_back(prefix);
                    
                }
                
                for(char ch = 'a'; ch<='z';ch++){
                    TriNode* next = curr->children[ch-'a'];
                    
                    //found
                    if(next != NULL){
                        prefix.push_back(ch);
                        //Recursion SAMBHAL lega
                        getNames(next,prefix,temp);
                        //backtrack
                        prefix.pop_back();
                    }
                }
                
            }
            
            vector<vector<string> >getAnswer(string word){
                TriNode* prev = root;
                vector< vector <string >> answer;
                string prefix ="";
                
                for( int i=0; i<word.length(); i++){
                    char lastCh = word[i];
                    
                    prefix.push_back(lastCh);
                    
                    TriNode* curr = prev->children[lastCh-'a'];
                    
                    //not found 
                    if(curr == NULL){
                        break;
                        
                    }
                    
                    else {
                        //found
                        vector<string>tempAns;
                        getNames(curr,prefix,tempAns);
                        
                        answer.push_back(tempAns);
                        prev = curr ;
                    }
                    
                }
                return answer;
            }

};


vector<vector<string>> solve(vector<string> &contactList,string query){
    // step 1 :Create trie
    Trie* t = new Trie();
    
    //step 2 : insert all contact in trie
    for(int i =0 ; i <contactList.size();i++){
        string str = contactList[i];
        t->insert(str);
    }
    
    //step 3 : get ans call
    return t->getAnswer(query);
}

int main()
{
    vector<string> contacts;
    
    contacts.push_back("deepak");
    contacts.push_back("dipu");
    contacts.push_back("dipa");
    contacts.push_back("dipsha");
    contacts.push_back("didi");
    contacts.push_back("disha");
    contacts.push_back("dipuka");
    
    string query = "dipi";
    

  vector<vector<string> >answer = solve(contacts,query);
  cout<<endl<<"Printing the answer :"<<endl<<endl;
  
  for(int i = 0; i<answer.size() ; i++){
      for(int j = 0; j<answer[i].size(); j++){
          cout<< answer[i][j]<<", ";
      }cout<<endl<<endl;
  }

    return 0;
}
