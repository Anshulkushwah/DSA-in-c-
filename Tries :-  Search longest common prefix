#include <iostream>

using namespace std;

class TriNode{
    public:
        char data;
        bool isTerminal;
        TriNode* children[26];

        TriNode(char d){
            this->data = d ;
            isTerminal = false;
            for(int i = 0; i<26 ; i++){
                children[i] = NULL;
            }
            }
    };

class Trie{
    public:
        TriNode* root;
        Trie(){
            root = new TriNode('\0');
        }
        void insertHelper(TriNode* root , string word){
            //base case
            if(word.length()==0){
                root->isTerminal = true;
                return;
            }

            //current character fetch =
            char ch = word[0];
            //mapping character to an index integer
            int index = ch - 'a';

            TriNode* child;
            //2 cases exits
            //the alphabate is allready present
            //alphabate is absent

            if(root->children[index] != NULL){
                //present case-> child pr pohoch jao
                child = root->children[index];
            }

            else
            {
                //absent case-> child create and link 
                child = new TriNode(ch);
                root->children[index] = child ;
            }

            //Recursion will take care of inserttion of remaining string
            insertHelper(child,word.substr(1));
        }

        void insert(string word){
            insertHelper(root , word);
            cout<<word<<" -> Insert successful " << endl;
        }


        bool searchHelper(TriNode* root, string word){
            //base case 

            if(word.length()==0){

                return root->isTerminal;
            }

            //fetch current character 
            char ch = word[0];
                //mapping character to an index integer
                int index = ch - 'a';

                TriNode* child;

            //2 cases exits
            //the alphabate is allready present
            //alphabate is absent

            if(root->children[index] != NULL){
                //present case-> child pr pohoch jao
                child = root->children[index];
            }
            else{
                return false;
            }

            //Recursion will take care
            return searchHelper(child, word.substr(1));



        }

            bool search(string word){
                return searchHelper(root , word);
            }
            
            
            int getChildCount(TriNode* temp){
                int count = 0 ;
                
                for(int i =0 ; i<26 ; i++){
                    if(temp->children[i] != NULL)
                    count++;
                }
                return count;
            }
            
            void LongestCommonPrefix(string input, string &res){
                TriNode* temp = root;
                //traverse over input string
                for(int i = 0; i<input.length(); i++){
                    
                    //fetch current character
                    char ch = input[i];
                    
                    if(getChildCount(temp) == 1){
                        //include character in answer string
                        res.push_back(ch);
                        
                        //root ko aage badhao
                        int index = ch - 'a';
                        temp = temp->children[index];
                    }
                    
                    else{
                        break;
                    }
                    
                    if(temp->isTerminal)
                    break;
                }
                
            }

};


int main()
{
    // trie create 
    Trie* trie = new Trie();

    //insert code
    trie->insert("code");
    trie->insert("coding");
    trie->insert("codemonk");
    trie->insert("coder");
    trie->insert("codee");

   /* cout<< trie->search("code")<< endl;
    cout<< trie->search("coding")<< endl;
    cout<< trie->search("coder")<< endl;
    cout<< trie->search("cods")<< endl;*/
    string res = "";
    trie->LongestCommonPrefix("code", res);
    cout<< "Result is : "<<res <<endl;

    return 0;
}
