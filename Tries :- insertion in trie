
#include <iostream>

using namespace std;

class TriNode{
    public:
        char data;
        bool isTerminal;
        TriNode* children[26];
        
        TriNode(char d){
            this->data = d ;
            isTerminal = false;
            for(int i = 0; i<26 ; i++){
                children[i] = NULL;
            }
            }
    };
    
class Trie{
    public:
        TriNode* root;
        Trie(){
            root = new TriNode('\0');
        }
        void insertHelper(TriNode* root , string word){
            //base case
            if(word.length()==0){
                root->isTerminal = true;
                return;
            }
            
            //current character fetch =
            char ch = word[0];
            //mapping character to an index integer
            int index = ch - 'a';
            
            TriNode* child;
            //2 cases exits
            //the alphabate is allready present
            //alphabate is absent
            
            if(root->children[index] != NULL){
                //present case-> child pr pohoch jao
                child = root->children[index];
            }
            
            else
            {
                //absent case-> child create and link 
                child = new TriNode(ch);
                root->children[index] = child ;
            }
            
            //Recursion will take care of inserttion of remaining string
            insertHelper(child,word.substr(1));
        }
        
        void insert(string word){
            insertHelper(root , word);
            cout<<word<<" -> Insert successful " << endl;
        }
};

int main()
{
    // trie create 
    Trie* trie = new Trie();
    
    //insert code
    trie->insert("code");
    trie->insert("coding");
    trie->insert("codemonk");
    trie->insert("coder");
    trie->insert("codee");
    

    return 0;
}
