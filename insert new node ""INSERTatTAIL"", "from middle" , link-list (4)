
#include <iostream>

using namespace std;


class Node
{

public:
  int data;
  Node *next;

  // constructor
    Node (int data)
  {
    this->data = data;
    this->next = NULL;
  }



};

void
insertAtHead (Node * &head, int d)
{
  // step 1 : 
  Node *newNode = new Node (d);
  //step 2 : 
  head->next = newNode;
  //step 3 : head update;
  head = newNode;
}


void
insertAtTail (Node * &tail, int d)
{
  // step 1 : 
  Node *newNode = new Node (d);
  //step 2 : 
  tail->next = newNode;
  //step 3 : head update;
  tail = newNode;
}

void
insertAtPosition (Node * &head, int pos, int d)
{

  //ToDo : tail updation , while inserting node at the end 
  //ToDo : validate that position should be atmax 1 more than current length of Linklist 

  if (pos == 1)
    {
      insertAtHead (head, d);
    }

  else
    {
      //step1 : creation of new Node
      Node *newNode = new Node (d);

      //step2 :
      Node *prev = head;
      int t = pos - 2;
      while (t--)
	{
	  prev = prev->next;
	}

      //step3 connections update
      newNode->next = prev->next;
      prev->next = newNode;
    }

}

void
traverse (Node * &head)
{
  Node *temp = head;
  while (temp != NULL)
    {
      cout << temp->data << " ";
      temp = temp->next;
    }

  cout << endl;


}

int
main ()
{

  Node *b = new Node (3);
  Node *head = b;
  Node *tail = b;

  insertAtTail (tail, 5);
  insertAtTail (tail, 6);
  insertAtTail (tail, 7);
  insertAtTail (tail, 8);

  traverse (head);

  insertAtPosition (head, 3, 12);

  traverse (head);

  return 0;
}
